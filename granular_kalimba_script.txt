{***************************************************
Granular Kalimba Script
Author: Miguel González del Río
Modified: July 38th, 2025
****************************************************}

{
    Tasks:                          
    - Change filter slot                OK!
    - Move reverb to a main effect      OK!
    - Add the replika delay             OK!
    
    - Add american flute
    - Add electric guitar
    - Add piano
}

on init
    load_performance_view( "perfView.nckp" )
    {message( "Granular Kalimba Loaded" )}
    set_script_title( "Granular Synth Script" )

    set_snapshot_type( 0 ) {0 = load the entire init callback, 1 = loads only the on persistence_changed callback}



    {Useful Variables}
    declare const $ui_wait := 1500000
    declare %callback_ids[100]



    {Background Animation Declaration}
    declare ui_slider $animation(0,124)
    set_control_par( get_ui_id( $animation ), $CONTROL_PAR_Z_LAYER, -1 )
    set_control_par(get_ui_id($animation), $CONTROL_PAR_POS_X, 390)
    set_control_par(get_ui_id($animation), $CONTROL_PAR_POS_Y, 50)
    set_control_par_str(get_ui_id($animation), $CONTROL_PAR_PICTURE, "animation")
    set_listener($NI_SIGNAL_TIMER_MS, 15000) {25 frames per second}




    {Group Declarations}
    declare $instrument_number := 2
    declare $a
    declare $b

    declare %group[4]
    %group[0] := 0              {Kalimba Group}
    %group[1] := 1              {Reverse Kalimba Group}
    %group[2] := 2              {Rain Effect Group}
    %group[3] := 3              {Reverse Rain Effect Group}
 
    declare %instrument_active[2]
    %instrument_active[0] := 1  {Kalimba Active}
    %instrument_active[1] := 0  {Rain Effect Active}

    declare %instrument_reverse[2]
    %instrument_reverse[0] := 0  {Kalimba Reverse}
    %instrument_reverse[1] := 0  {Rain Effect Reverse}

    declare %instrument_position[2]
    %instrument_position[0] := 0 {Kalimba Position}
    %instrument_position[1] := 0 {Rain Effect Position}

    declare ?instrument_position_randomness[2]
    ?instrument_position_randomness[0] := 0.0 {Kalimba Position Randomness}
    ?instrument_position_randomness[1] := 0.0 {Rain Effect Position Randomness}


    {Kalimba Group}
    declare ui_button $kalimba_toggle_button                    {Button to toggle kalimba}
    set_control_par( get_ui_id( $kalimba_toggle_button ), $CONTROL_PAR_WIDTH, 50 )
    set_control_par_str( get_ui_id( $kalimba_toggle_button ), $CONTROL_PAR_TEXT, "Kalimba" )
    declare ui_button $kalimba_reverse_button                   {Button to toggle reversed grains}
    set_control_par( get_ui_id( $kalimba_reverse_button ), $CONTROL_PAR_WIDTH, 55 )
    set_control_par_str( get_ui_id( $kalimba_reverse_button ), $CONTROL_PAR_TEXT, "Reversed" )

    declare ui_slider $kalimba_position(0, 1000000 )            {kalimba_position slider for grain playback}
    declare ui_label $kalimba_position_label( 1, 1 )
        set_control_par_str( get_ui_id( $kalimba_position_label ), $CONTROL_PAR_TEXT, "POSITION" ) 

    declare ui_slider $kalimba_position_random(0, 1000000 )     {kalimba_position slider for grain playback}
    declare ui_label $kalimba_position_random_label( 1, 1 )
        set_control_par_str( get_ui_id( $kalimba_position_random_label ), $CONTROL_PAR_TEXT, "RANDOM" )

    declare ui_slider $kalimba_volume(0, 1000000)                  {Volume knob for Kalimba}
    declare ui_label $kalimba_volume_label( 1, 1 )
        set_control_par_str( get_ui_id( $kalimba_volume_label ), $CONTROL_PAR_TEXT, "VOLUME" )

    declare ui_panel $kalimba_panel
    set_control_par( get_ui_id( $kalimba_panel ), $CONTROL_PAR_POS_X, 30 )
    set_control_par( get_ui_id( $kalimba_panel ), $CONTROL_PAR_POS_Y, 50 )

    set_control_par( get_ui_id( $kalimba_toggle_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    set_control_par( get_ui_id( $kalimba_toggle_button ), $CONTROL_PAR_POS_X, 0 )
    set_control_par( get_ui_id( $kalimba_toggle_button ), $CONTROL_PAR_POS_Y, 25 )

    set_control_par( get_ui_id( $kalimba_reverse_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    set_control_par( get_ui_id( $kalimba_reverse_button ), $CONTROL_PAR_POS_X, 60 )
    set_control_par( get_ui_id( $kalimba_reverse_button ), $CONTROL_PAR_POS_Y, 25 )
    
    set_control_par( get_ui_id( $kalimba_position ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    set_control_par( get_ui_id( $kalimba_position ), $CONTROL_PAR_POS_X, 155 )
    set_control_par( get_ui_id( $kalimba_position ), $CONTROL_PAR_POS_Y, 15 )

    set_control_par( get_ui_id( $kalimba_position_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    hide_part( $kalimba_position_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $kalimba_position_label ), $CONTROL_PAR_POS_X, 146)
    set_control_par( get_ui_id( $kalimba_position_label ), $CONTROL_PAR_POS_Y, 50 )

    set_control_par( get_ui_id( $kalimba_position_random ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    set_control_par( get_ui_id( $kalimba_position_random ), $CONTROL_PAR_POS_X, 225 )
    set_control_par( get_ui_id( $kalimba_position_random ), $CONTROL_PAR_POS_Y, 15 )

    set_control_par( get_ui_id( $kalimba_position_random_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    hide_part( $kalimba_position_random_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $kalimba_position_random_label ), $CONTROL_PAR_POS_X, 216)
    set_control_par( get_ui_id( $kalimba_position_random_label ), $CONTROL_PAR_POS_Y, 50 )

    set_control_par( get_ui_id( $kalimba_volume ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    set_control_par( get_ui_id( $kalimba_volume ), $CONTROL_PAR_POS_X, 295 )
    set_control_par( get_ui_id( $kalimba_volume ), $CONTROL_PAR_POS_Y, 15 )

    set_control_par( get_ui_id( $kalimba_volume_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $kalimba_panel ) )
    hide_part( $kalimba_volume_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $kalimba_volume_label ), $CONTROL_PAR_POS_X, 286)
    set_control_par( get_ui_id( $kalimba_volume_label ), $CONTROL_PAR_POS_Y, 50 )

    {Rain Stick Group}
    declare ui_button $rain_stick_toggle_button
    set_control_par( get_ui_id( $rain_stick_toggle_button ), $CONTROL_PAR_WIDTH, 60 )
    set_control_par_str( get_ui_id( $rain_stick_toggle_button ), $CONTROL_PAR_TEXT, "Rain Stick" )
    declare ui_button $rain_stick_reverse_button
    set_control_par( get_ui_id( $rain_stick_reverse_button ), $CONTROL_PAR_WIDTH, 55 )
    set_control_par_str( get_ui_id( $rain_stick_reverse_button ), $CONTROL_PAR_TEXT, "Reversed" )

    declare ui_slider $rain_stick_position(0, 1000000 )         { slider for grain playback}
    declare ui_label $rain_position_label( 1, 1 )
        set_control_par_str( get_ui_id( $rain_position_label ), $CONTROL_PAR_TEXT, "POSITION" )

    declare ui_slider $rain_stick_position_random(0, 1000000 )         {kalimba_position slider for grain playback}
    declare ui_label $rain_stick_position_random_label( 1, 1 )
        set_control_par_str( get_ui_id( $rain_stick_position_random_label ), $CONTROL_PAR_TEXT, "RANDOM" )

    declare ui_slider $rain_stick_volume(0, 1000000)                  {Volume knob for Rain Stick}
    declare ui_label $rain_stick_volume_label( 1, 1 )
        set_control_par_str( get_ui_id( $rain_stick_volume_label ), $CONTROL_PAR_TEXT, "VOLUME" )

    declare ui_panel $rain_stick_panel
    set_control_par( get_ui_id( $rain_stick_panel ), $CONTROL_PAR_POS_X, 20 )
    set_control_par( get_ui_id( $rain_stick_panel ), $CONTROL_PAR_POS_Y, 120 )

    set_control_par( get_ui_id( $rain_stick_toggle_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    set_control_par( get_ui_id( $rain_stick_toggle_button ), $CONTROL_PAR_POS_X, 5 )
    set_control_par( get_ui_id( $rain_stick_toggle_button ), $CONTROL_PAR_POS_Y, 25 )

    set_control_par( get_ui_id( $rain_stick_reverse_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    set_control_par( get_ui_id( $rain_stick_reverse_button ), $CONTROL_PAR_POS_X, 70 )
    set_control_par( get_ui_id( $rain_stick_reverse_button ), $CONTROL_PAR_POS_Y, 25 )

    set_control_par( get_ui_id( $rain_stick_position ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    set_control_par( get_ui_id( $rain_stick_position ), $CONTROL_PAR_POS_X, 165 )
    set_control_par( get_ui_id( $rain_stick_position ), $CONTROL_PAR_POS_Y, 15 )

    set_control_par( get_ui_id( $rain_position_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    hide_part( $rain_position_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $rain_position_label ), $CONTROL_PAR_POS_X, 156)
    set_control_par( get_ui_id( $rain_position_label ), $CONTROL_PAR_POS_Y, 50 )

    set_control_par( get_ui_id( $rain_stick_position_random ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    set_control_par( get_ui_id( $rain_stick_position_random ), $CONTROL_PAR_POS_X, 235 )
    set_control_par( get_ui_id( $rain_stick_position_random ), $CONTROL_PAR_POS_Y, 15 )

    set_control_par( get_ui_id( $rain_stick_position_random_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    hide_part( $rain_stick_position_random_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $rain_stick_position_random_label ), $CONTROL_PAR_POS_X, 226)
    set_control_par( get_ui_id( $rain_stick_position_random_label ), $CONTROL_PAR_POS_Y, 50 )

    set_control_par( get_ui_id( $rain_stick_volume ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) ) 
    set_control_par( get_ui_id( $rain_stick_volume ), $CONTROL_PAR_POS_X, 305 )
    set_control_par( get_ui_id( $rain_stick_volume ), $CONTROL_PAR_POS_Y, 15 )

    set_control_par( get_ui_id( $rain_stick_volume_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $rain_stick_panel ) )
    hide_part( $rain_stick_volume_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $rain_stick_volume_label ), $CONTROL_PAR_POS_X, 296)
    set_control_par( get_ui_id( $rain_stick_volume_label ), $CONTROL_PAR_POS_Y, 50 )




    {Granular Engine Parameters}
    declare ui_slider $grainAmount(1,100)               {Grains per second}
    declare $timebetweenGrains                          {time between grains in microseconds}
    declare $offset := 0                                {Offset for grain playback (Can be used for randomization later)}
    declare $grainID := 0                               {ID for the grain being played}
    declare ui_slider $grainDuration(45442, 696711)     {HOLD values for 1ms to 1000ms}
    declare $note_playing := 0                          {Flag to check if a note is playing}

    declare ui_slider $width_knob (0, 1000)              {width_knob for the grains}
    declare ui_label $width_label(1,1)
        set_control_par_str( get_ui_id( $width_label ), $CONTROL_PAR_TEXT, "WIDTH" )
    declare $new_id

    declare $count := 0

    declare ui_label $grainAmount_label(1,1)
        set_control_par_str( get_ui_id( $grainAmount_label ), $CONTROL_PAR_TEXT, "" ) 
    declare ui_label $grainDuration_label(1,1)
        set_control_par_str( get_ui_id( $grainDuration_label ), $CONTROL_PAR_TEXT, "" )




    {Poliphony Settings}
    declare %note_active[128]
    declare %evento_id[128]




    {LFO setting}
    declare ui_slider $lfo_freq(0, 692000) {LFO rate}
    declare ui_label $lfo_freq_label(1,1)
        set_control_par_str( get_ui_id( $lfo_freq_label ), $CONTROL_PAR_TEXT, " FREQ" )

    declare ui_slider $lfo_depth(0, 1000000) {LFO depth}
    declare ui_label $lfo_depth_label(1,1)
        set_control_par_str( get_ui_id( $lfo_depth_label ), $CONTROL_PAR_TEXT, "DEPTH" )

    declare ui_slider $lfo_fade_in(0, 1000000) {LFO fade in}
    declare ui_label $lfo_fade_in_label(1,1)
        set_control_par_str( get_ui_id( $lfo_fade_in_label ), $CONTROL_PAR_TEXT, "FADE IN" )

    {LFO Settings Panel}
    declare ui_panel $LFOSettingsPanel
    set_control_par( get_ui_id( $LFOSettingsPanel ), $CONTROL_PAR_POS_X, 296 )
    set_control_par( get_ui_id( $LFOSettingsPanel ), $CONTROL_PAR_POS_Y, 255 )

    set_control_par( get_ui_id( $lfo_freq ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $LFOSettingsPanel ) )
    set_control_par( get_ui_id( $lfo_freq ), $CONTROL_PAR_POS_X, 100 )
    set_control_par( get_ui_id( $lfo_freq ), $CONTROL_PAR_POS_Y, 20 )

    set_control_par( get_ui_id( $lfo_freq_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $LFOSettingsPanel ) )
    hide_part( $lfo_freq_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $lfo_freq_label ), $CONTROL_PAR_POS_X, 98 )
    set_control_par( get_ui_id( $lfo_freq_label ), $CONTROL_PAR_POS_Y, 60 )
    
    set_control_par( get_ui_id( $lfo_depth ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $LFOSettingsPanel ) )
    set_control_par( get_ui_id( $lfo_depth ), $CONTROL_PAR_POS_X, 160 )
    set_control_par( get_ui_id( $lfo_depth ), $CONTROL_PAR_POS_Y, 0 )

    set_control_par( get_ui_id( $lfo_depth_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $LFOSettingsPanel ) )
    hide_part( $lfo_depth_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $lfo_depth_label ), $CONTROL_PAR_POS_X, 173 )
    set_control_par( get_ui_id( $lfo_depth_label ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $lfo_fade_in ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $LFOSettingsPanel ) )
    set_control_par( get_ui_id( $lfo_fade_in ), $CONTROL_PAR_POS_X, 254 )
    set_control_par( get_ui_id( $lfo_fade_in ), $CONTROL_PAR_POS_Y, 20 )

    set_control_par( get_ui_id( $lfo_fade_in_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $LFOSettingsPanel ) )
    hide_part( $lfo_fade_in_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $lfo_fade_in_label ), $CONTROL_PAR_POS_X, 249 )
    set_control_par( get_ui_id( $lfo_fade_in_label ), $CONTROL_PAR_POS_Y, 60 )




    {Effect Settings}
    declare ui_button $effects_bypass_all
    declare %bypassed[4]
    set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_WIDTH, 69 )
    set_control_par_str( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_TEXT, "BYPASS ALL" )
    set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_POS_X, 926)
    set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_POS_Y, 327 )

        {Reverb}
    declare ui_slider $reverb_amount(0, 1000000) {Reverb amount}
    declare ui_label $reverb_amount_label(1,1)
        set_control_par_str( get_ui_id( $reverb_amount_label ), $CONTROL_PAR_TEXT, "AMOUNT" )
    
    declare ui_slider $reverb_pre_delay(0, 1000000) {Reverb pre-delay}
    declare ui_label $reverb_pre_delay_label(1,1)
        set_control_par_str( get_ui_id( $reverb_pre_delay_label ), $CONTROL_PAR_TEXT, "PRE-DELAY" )

    declare ui_slider $reverb_time(0, 1000000) {Reverb decay time}
    declare ui_label $reverb_time_label(1,1)
        set_control_par_str( get_ui_id( $reverb_time_label ), $CONTROL_PAR_TEXT, "TIME" )
    
    declare ui_slider $reverb_size(0, 1000000) {Reverb size}
    declare ui_label $reverb_size_label(1,1)
        set_control_par_str( get_ui_id( $reverb_size_label ), $CONTROL_PAR_TEXT, "SIZE" )
    
    declare ui_slider $reverb_stereo(0, 1000000) {Reverb stereo width}
    declare ui_label $reverb_stereo_label(1,1)
        set_control_par_str( get_ui_id( $reverb_stereo_label ), $CONTROL_PAR_TEXT, "STEREO" )

    declare ui_slider $reverb_low_shelf(0, 1000000) {Reverb low shelf}
    declare ui_label $reverb_low_shelf_label(1,1)
        set_control_par_str( get_ui_id( $reverb_low_shelf_label ), $CONTROL_PAR_TEXT, "LOW SHELF" )
    
    declare ui_slider $reverb_high_cut(0, 1000000) {Reverb high cut}
    declare ui_label $reverb_high_cut_label(1,1)
        set_control_par_str( get_ui_id( $reverb_high_cut_label ), $CONTROL_PAR_TEXT, "HIGH CUT" )

    declare ui_button $reverb_bypass_button
    set_control_par( get_ui_id( $reverb_bypass_button ), $CONTROL_PAR_WIDTH, 50 )
    set_control_par_str( get_ui_id( $reverb_bypass_button ), $CONTROL_PAR_TEXT, "BYPASS" )

        {Filter}
    declare ui_slider $filter_lowcut(0, 1000000) {Filter low cut}
    declare ui_label $filter_lowcut_label(1,1)
        set_control_par_str( get_ui_id( $filter_lowcut_label ), $CONTROL_PAR_TEXT, "LOW CUT" )

    declare ui_slider $filter_lowcut_resonance(0, 1000000) {Filter low cut resonance}
    declare ui_label $filter_lowcut_resonance_label(1,1)
        set_control_par_str( get_ui_id( $filter_lowcut_resonance_label ), $CONTROL_PAR_TEXT, "LC RES" )

    declare ui_slider $filter_highcut(0, 1000000) {Filter high cut}
    declare ui_label $filter_highcut_label(1,1)
        set_control_par_str( get_ui_id( $filter_highcut_label ), $CONTROL_PAR_TEXT, "HIGH CUT" )    

    declare ui_slider $filter_highcut_resonance(0, 1000000) {Filter low cut resonance}
    declare ui_label $filter_highcut_resonance_label(1,1)
        set_control_par_str( get_ui_id( $filter_highcut_resonance_label ), $CONTROL_PAR_TEXT, "HC RES" )

    declare ui_button $filter_bypass_button
    set_control_par( get_ui_id( $filter_bypass_button ), $CONTROL_PAR_WIDTH, 50 )
    set_control_par_str( get_ui_id( $filter_bypass_button ), $CONTROL_PAR_TEXT, "BYPASS" )

        {Psyche Delay slot 0}
    declare ui_button $psyche_delay_toggle_button
    set_control_par( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_VALUE, 1)
    set_control_par( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_WIDTH, 70 )
    set_control_par_str( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_TEXT, "Psyche Delay" )

    set_control_par( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_POS_X, 240 )
    set_control_par( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_POS_Y, 327 )

    declare ui_slider $psyche_delay_amount(0, 1000000) {Psyche delay amount}
    declare ui_label $psyche_delay_amount_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_amount_label ), $CONTROL_PAR_TEXT, "AMOUNT" )

    declare ui_slider $psyche_delay_time(0, 1000000) {Psyche delay time}
    declare ui_label $psyche_delay_time_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_time_label ), $CONTROL_PAR_TEXT, "TIME" )

    declare ui_slider $psyche_delay_feedback(0, 1000000) {Psyche delay feedback}
    declare ui_label $psyche_delay_feedback_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_feedback_label ), $CONTROL_PAR_TEXT, "FEEDBACK" )

    declare ui_slider $psyche_delay_lr_offset(0, 1000000) {Psyche delay left/right offset}
    declare ui_label $psyche_delay_lr_offset_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_lr_offset_label ), $CONTROL_PAR_TEXT, "LR OFFSET" )

    declare ui_slider $psyche_delay_cross_fb(0, 1000000) {Psyche delay cross feedback}
    declare ui_label $psyche_delay_cross_fb_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_cross_fb_label ), $CONTROL_PAR_TEXT, "CROSS FB" )

    declare ui_slider $psyche_delay_pitch(0, 1000000) {Psyche delay pitch}
    declare ui_label $psyche_delay_pitch_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_pitch_label ), $CONTROL_PAR_TEXT, "PITCH" )
    
    declare ui_slider $psyche_delay_detune(0, 1000000) {Psyche delay detune}
    declare ui_label $psyche_delay_detune_label(1,1)
        set_control_par_str( get_ui_id( $psyche_delay_detune_label ), $CONTROL_PAR_TEXT, "DETUNE" )
    
    declare ui_button $psyche_delay_reversed_button
    set_control_par( get_ui_id( $psyche_delay_reversed_button ), $CONTROL_PAR_WIDTH, 60 )
    set_control_par_str( get_ui_id( $psyche_delay_reversed_button ), $CONTROL_PAR_TEXT, "REVERSED" )
    set_engine_par( $ENGINE_PAR_PSYDL_REVERSE, $psyche_delay_reversed_button, -1, 0, $NI_SEND_BUS )

    declare ui_button $psyche_delay_bypass_button
    set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_WIDTH, 50 )
    set_control_par_str( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_TEXT, "BYPASS" )
    
    
    {Psyche Delay Settings Panel}
    declare ui_panel $PsycheDelaySettingsPanel
    set_control_par( get_ui_id( $PsycheDelaySettingsPanel ), $CONTROL_PAR_POS_X, 244 )
    set_control_par( get_ui_id( $PsycheDelaySettingsPanel ), $CONTROL_PAR_POS_Y, 300 )

    set_control_par( get_ui_id( $psyche_delay_amount ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_amount ), $CONTROL_PAR_POS_X, 120 )
    set_control_par( get_ui_id( $psyche_delay_amount ), $CONTROL_PAR_POS_Y, 75 )

    set_control_par( get_ui_id( $psyche_delay_amount_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_amount_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_amount_label ), $CONTROL_PAR_POS_X, 132 )
    set_control_par( get_ui_id( $psyche_delay_amount_label ), $CONTROL_PAR_POS_Y, 140 )

    set_control_par( get_ui_id( $psyche_delay_time ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_time ), $CONTROL_PAR_POS_X, 200 )
    set_control_par( get_ui_id( $psyche_delay_time ), $CONTROL_PAR_POS_Y, 115 )

    set_control_par( get_ui_id( $psyche_delay_time_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_time_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_time_label ), $CONTROL_PAR_POS_X, 200 )
    set_control_par( get_ui_id( $psyche_delay_time_label ), $CONTROL_PAR_POS_Y, 150 )

    set_control_par( get_ui_id( $psyche_delay_feedback ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_feedback ), $CONTROL_PAR_POS_X, 200 )
    set_control_par( get_ui_id( $psyche_delay_feedback ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $psyche_delay_feedback_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_feedback_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_feedback_label ), $CONTROL_PAR_POS_X, 188 )
    set_control_par( get_ui_id( $psyche_delay_feedback_label ), $CONTROL_PAR_POS_Y, 95 )

    set_control_par( get_ui_id( $psyche_delay_lr_offset ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_lr_offset ), $CONTROL_PAR_POS_X, 72 )
    set_control_par( get_ui_id( $psyche_delay_lr_offset ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $psyche_delay_lr_offset_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_lr_offset_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_lr_offset_label ), $CONTROL_PAR_POS_X, 59 )
    set_control_par( get_ui_id( $psyche_delay_lr_offset_label ), $CONTROL_PAR_POS_Y, 95 )

    set_control_par( get_ui_id( $psyche_delay_cross_fb ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_cross_fb ), $CONTROL_PAR_POS_X, 72 )
    set_control_par( get_ui_id( $psyche_delay_cross_fb ), $CONTROL_PAR_POS_Y, 115 )

    set_control_par( get_ui_id( $psyche_delay_cross_fb_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_cross_fb_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_cross_fb_label ), $CONTROL_PAR_POS_X, 62 )
    set_control_par( get_ui_id( $psyche_delay_cross_fb_label ), $CONTROL_PAR_POS_Y, 150 )

    set_control_par( get_ui_id( $psyche_delay_pitch ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_pitch ), $CONTROL_PAR_POS_X, 20 )
    set_control_par( get_ui_id( $psyche_delay_pitch ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $psyche_delay_pitch_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_pitch_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_pitch_label ), $CONTROL_PAR_POS_X, 18 )
    set_control_par( get_ui_id( $psyche_delay_pitch_label ), $CONTROL_PAR_POS_Y, 95 )

    set_control_par( get_ui_id( $psyche_delay_detune ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_detune ), $CONTROL_PAR_POS_X, 20 )
    set_control_par( get_ui_id( $psyche_delay_detune ), $CONTROL_PAR_POS_Y, 115 )

    set_control_par( get_ui_id( $psyche_delay_detune_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    hide_part( $psyche_delay_detune_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $psyche_delay_detune_label ), $CONTROL_PAR_POS_X, 14 )
    set_control_par( get_ui_id( $psyche_delay_detune_label ), $CONTROL_PAR_POS_Y, 150 )

    set_control_par( get_ui_id( $psyche_delay_reversed_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_reversed_button ), $CONTROL_PAR_POS_X, 124 )
    set_control_par( get_ui_id( $psyche_delay_reversed_button ), $CONTROL_PAR_POS_Y, 55 )

    set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $PsycheDelaySettingsPanel ) )
    set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_POS_X, 132 )
    set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_POS_Y, 165 )

    {Replika Delay slot 2}
    declare ui_button $replika_delay_toggle_button
    set_control_par( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_VALUE, 0)
    set_control_par( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_WIDTH, 70 )
    set_control_par_str( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_TEXT, "Replika Delay" )

    set_control_par( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_POS_X, 310 )
    set_control_par( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_POS_Y, 327 )

    declare ui_slider $replika_delay_amount(0, 1000000) {Replika delay amount}
    declare ui_label $replika_delay_amount_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_amount_label ), $CONTROL_PAR_TEXT, "AMOUNT" )

    declare ui_slider $replika_delay_time(0, 1000000) {Replika delay time}
    declare ui_label $replika_delay_time_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_time_label ), $CONTROL_PAR_TEXT, "TIME" )

    declare ui_slider $replika_delay_feedback(0, 1000000) {Replika delay feedback}
    declare ui_label $replika_delay_feedback_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_feedback_label ), $CONTROL_PAR_TEXT, "FEEDBACK" )
    
    declare ui_slider $replika_delay_depth( 0, 1000000) {Replika delay depth}
    declare ui_label $replika_delay_depth_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_depth_label ), $CONTROL_PAR_TEXT, "DEPTH" )

    declare ui_slider $replika_delay_rate(0, 1000000) {Replika delay rate}
    declare ui_label $replika_delay_rate_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_rate_label ), $CONTROL_PAR_TEXT, "RATE" )

    declare ui_slider $replika_delay_saturation(0, 1000000) {Replika delay saturation}
    declare ui_label $replika_delay_saturation_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_saturation_label ), $CONTROL_PAR_TEXT, "SATURATION" )

    declare ui_slider $replika_delay_filter(0, 1000000) {Replika delay filter}
    declare ui_label $replika_delay_filter_label(1,1)
        set_control_par_str( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_TEXT, "FILTER" )

    declare ui_button $replika_delay_bypass_button
    set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_WIDTH, 50 )
    set_control_par_str( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_TEXT, "BYPASS" )
    set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_VALUE, 1 )
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS )

    {Replika Delay Settings Panel}
    declare ui_panel $ReplikaDelaySettingsPanel
    set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL )
    set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_POS_X, 244 )
    set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_POS_Y, 300 )

    set_control_par( get_ui_id( $replika_delay_amount ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_amount ), $CONTROL_PAR_POS_X, 120 )
    set_control_par( get_ui_id( $replika_delay_amount ), $CONTROL_PAR_POS_Y, 75 )

    set_control_par( get_ui_id( $replika_delay_amount_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_amount_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_amount_label ), $CONTROL_PAR_POS_X, 132 )
    set_control_par( get_ui_id( $replika_delay_amount_label ), $CONTROL_PAR_POS_Y, 140 )

    set_control_par( get_ui_id( $replika_delay_time ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_time ), $CONTROL_PAR_POS_X, 200 )
    set_control_par( get_ui_id( $replika_delay_time ), $CONTROL_PAR_POS_Y, 115 )

    set_control_par( get_ui_id( $replika_delay_time_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_time_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_time_label ), $CONTROL_PAR_POS_X, 200 )
    set_control_par( get_ui_id( $replika_delay_time_label ), $CONTROL_PAR_POS_Y, 150 )

    set_control_par( get_ui_id( $replika_delay_feedback ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_feedback ), $CONTROL_PAR_POS_X, 200 )
    set_control_par( get_ui_id( $replika_delay_feedback ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $replika_delay_feedback_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_feedback_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_feedback_label ), $CONTROL_PAR_POS_X, 188 )
    set_control_par( get_ui_id( $replika_delay_feedback_label ), $CONTROL_PAR_POS_Y, 95 )

    set_control_par( get_ui_id( $replika_delay_depth ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_depth ), $CONTROL_PAR_POS_X, 72 )
    set_control_par( get_ui_id( $replika_delay_depth ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $replika_delay_depth_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_depth_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_depth_label ), $CONTROL_PAR_POS_X, 70 )
    set_control_par( get_ui_id( $replika_delay_depth_label ), $CONTROL_PAR_POS_Y, 95 )

    set_control_par( get_ui_id( $replika_delay_rate ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_rate ), $CONTROL_PAR_POS_X, 72 )
    set_control_par( get_ui_id( $replika_delay_rate ), $CONTROL_PAR_POS_Y, 115 )

    set_control_par( get_ui_id( $replika_delay_rate_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_rate_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_rate_label ), $CONTROL_PAR_POS_X, 73 )
    set_control_par( get_ui_id( $replika_delay_rate_label ), $CONTROL_PAR_POS_Y, 150 )

    set_control_par( get_ui_id( $replika_delay_saturation ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_saturation ), $CONTROL_PAR_POS_X, 20 )
    set_control_par( get_ui_id( $replika_delay_saturation ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $replika_delay_saturation_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_saturation_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_saturation_label ), $CONTROL_PAR_POS_X, 3 )
    set_control_par( get_ui_id( $replika_delay_saturation_label ), $CONTROL_PAR_POS_Y, 95 )

    set_control_par( get_ui_id( $replika_delay_filter ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_filter ), $CONTROL_PAR_POS_X, 20 )
    set_control_par( get_ui_id( $replika_delay_filter ), $CONTROL_PAR_POS_Y, 115 )

    set_control_par( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    hide_part( $replika_delay_filter_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_POS_X, 18 )
    set_control_par( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_POS_Y, 150 )

    set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $ReplikaDelaySettingsPanel ) )
    set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_POS_X, 132 )
    set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_POS_Y, 165 )



    {Effects Panel}
    declare ui_panel $EffectsSettingsPanel
        {Reverb}
    declare $reverb_move := 113
    set_control_par( get_ui_id( $reverb_amount ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_amount ), $CONTROL_PAR_POS_X, 500 + $reverb_move )
    set_control_par( get_ui_id( $reverb_amount ), $CONTROL_PAR_POS_Y, 375 )

    set_control_par( get_ui_id( $reverb_amount_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_amount_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_amount_label ), $CONTROL_PAR_POS_X, 512 + $reverb_move )
    set_control_par( get_ui_id( $reverb_amount_label ), $CONTROL_PAR_POS_Y, 440 )


    set_control_par( get_ui_id( $reverb_pre_delay ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_pre_delay ), $CONTROL_PAR_POS_X, 580 + $reverb_move )
    set_control_par( get_ui_id( $reverb_pre_delay ), $CONTROL_PAR_POS_Y, 360 )

    set_control_par( get_ui_id( $reverb_pre_delay_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_pre_delay_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_pre_delay_label ), $CONTROL_PAR_POS_X, 568 + $reverb_move )
    set_control_par( get_ui_id( $reverb_pre_delay_label ), $CONTROL_PAR_POS_Y, 395 )


    set_control_par( get_ui_id( $reverb_time ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_time ), $CONTROL_PAR_POS_X, 580 + $reverb_move )
    set_control_par( get_ui_id( $reverb_time ), $CONTROL_PAR_POS_Y, 415 )

    set_control_par( get_ui_id( $reverb_time_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_time_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_time_label ), $CONTROL_PAR_POS_X, 580 + $reverb_move )
    set_control_par( get_ui_id( $reverb_time_label ), $CONTROL_PAR_POS_Y, 450 )


    set_control_par( get_ui_id( $reverb_size ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_size ), $CONTROL_PAR_POS_X, 400 + $reverb_move )
    set_control_par( get_ui_id( $reverb_size ), $CONTROL_PAR_POS_Y, 360 )

    set_control_par( get_ui_id( $reverb_size_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_size_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_size_label ), $CONTROL_PAR_POS_X, 402 + $reverb_move )
    set_control_par( get_ui_id( $reverb_size_label ), $CONTROL_PAR_POS_Y, 395 )


    set_control_par( get_ui_id( $reverb_stereo ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_stereo ), $CONTROL_PAR_POS_X, 400 + $reverb_move )
    set_control_par( get_ui_id( $reverb_stereo ), $CONTROL_PAR_POS_Y, 415 )

    set_control_par( get_ui_id( $reverb_stereo_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_stereo_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_stereo_label ), $CONTROL_PAR_POS_X, 395 + $reverb_move )
    set_control_par( get_ui_id( $reverb_stereo_label ), $CONTROL_PAR_POS_Y, 450 )


    set_control_par( get_ui_id( $reverb_low_shelf ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_low_shelf ), $CONTROL_PAR_POS_X, 452 + $reverb_move )
    set_control_par( get_ui_id( $reverb_low_shelf ), $CONTROL_PAR_POS_Y, 360 )

    set_control_par( get_ui_id( $reverb_low_shelf_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_low_shelf_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_low_shelf_label ), $CONTROL_PAR_POS_X, 440 + $reverb_move )
    set_control_par( get_ui_id( $reverb_low_shelf_label ), $CONTROL_PAR_POS_Y, 395 )


    set_control_par( get_ui_id( $reverb_high_cut ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_high_cut ), $CONTROL_PAR_POS_X, 452 + $reverb_move )
    set_control_par( get_ui_id( $reverb_high_cut ), $CONTROL_PAR_POS_Y, 415 )
    
    set_control_par( get_ui_id( $reverb_high_cut_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $reverb_high_cut_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $reverb_high_cut_label ), $CONTROL_PAR_POS_X, 445 + $reverb_move )
    set_control_par( get_ui_id( $reverb_high_cut_label ), $CONTROL_PAR_POS_Y, 450 )

    set_control_par( get_ui_id( $reverb_bypass_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $reverb_bypass_button ), $CONTROL_PAR_POS_X, 512 + $reverb_move )
    set_control_par( get_ui_id( $reverb_bypass_button ), $CONTROL_PAR_POS_Y, 465 )

        {Filter}
    set_control_par( get_ui_id( $filter_lowcut ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $filter_lowcut ), $CONTROL_PAR_POS_X, 800 - 40 )
    set_control_par( get_ui_id( $filter_lowcut ), $CONTROL_PAR_POS_Y, 350 )

    set_control_par( get_ui_id( $filter_lowcut_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $filter_lowcut_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $filter_lowcut_label ), $CONTROL_PAR_POS_X, 855 - 40)
    set_control_par( get_ui_id( $filter_lowcut_label ), $CONTROL_PAR_POS_Y, 368 )

    set_control_par( get_ui_id( $filter_lowcut_resonance ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $filter_lowcut_resonance ), $CONTROL_PAR_POS_X, 770 )
    set_control_par( get_ui_id( $filter_lowcut_resonance ), $CONTROL_PAR_POS_Y, 425 )

    set_control_par( get_ui_id( $filter_lowcut_resonance_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $filter_lowcut_resonance_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $filter_lowcut_resonance_label ), $CONTROL_PAR_POS_X, 815)
    set_control_par( get_ui_id( $filter_lowcut_resonance_label ), $CONTROL_PAR_POS_Y, 432 )


    set_control_par( get_ui_id( $filter_highcut ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $filter_highcut ), $CONTROL_PAR_POS_X, 875 )
    set_control_par( get_ui_id( $filter_highcut ), $CONTROL_PAR_POS_Y, 350 )

    set_control_par( get_ui_id( $filter_highcut_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $filter_highcut_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $filter_highcut_label ), $CONTROL_PAR_POS_X, 930)
    set_control_par( get_ui_id( $filter_highcut_label ), $CONTROL_PAR_POS_Y, 368 )


    set_control_par( get_ui_id( $filter_highcut_resonance ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $filter_highcut_resonance ), $CONTROL_PAR_POS_X, 885 )
    set_control_par( get_ui_id( $filter_highcut_resonance ), $CONTROL_PAR_POS_Y, 425 )

    set_control_par( get_ui_id( $filter_highcut_resonance_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    hide_part( $filter_highcut_resonance_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $filter_highcut_resonance_label ), $CONTROL_PAR_POS_X, 930)
    set_control_par( get_ui_id( $filter_highcut_resonance_label ), $CONTROL_PAR_POS_Y, 432 )

    set_control_par( get_ui_id( $filter_bypass_button ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EffectsSettingsPanel ) )
    set_control_par( get_ui_id( $filter_bypass_button ), $CONTROL_PAR_POS_X, 875 - 40 )
    set_control_par( get_ui_id( $filter_bypass_button ), $CONTROL_PAR_POS_Y, 465 )




    {Envelope Parameters}
    declare ui_slider $amp_env_attack(0, 440650)        {Attack time. 440650 corresponds to 1000ms}
    declare ui_slider $amp_env_decay(0, 416791)         {Decay time. 416791 corresponds to 1000ms}

    declare ui_label $amp_env_attack_label(1,1)
    set_control_par_str( get_ui_id( $amp_env_attack_label ), $CONTROL_PAR_TEXT, "Attack" )
    declare ui_label $amp_env_decay_label(1,1)
    set_control_par_str( get_ui_id( $amp_env_decay_label ), $CONTROL_PAR_TEXT, "Decay" )




    {Default Values}
    set_control_par( get_ui_id( $grainAmount ), $CONTROL_PAR_DEFAULT_VALUE, 10 ) {Default grains per second}
    $timebetweenGrains := 1000000 / get_control_par(get_ui_id($grainAmount), $CONTROL_PAR_DEFAULT_VALUE) {Default time between grains in microseconds}
    set_control_par(get_ui_id($grainDuration), $CONTROL_PAR_DEFAULT_VALUE, 440650) {Default grain duration in milliseconds}
    set_control_par( get_ui_id($width_knob), $CONTROL_PAR_DEFAULT_VALUE, 500 )
    
    set_control_par( get_ui_id( $amp_env_attack ), $CONTROL_PAR_DEFAULT_VALUE, 200807 ) {Default attack value (200807 corresponds to 10ms)}
    set_control_par( get_ui_id( $amp_env_decay ), $CONTROL_PAR_DEFAULT_VALUE, 189935 ) {Default decay value (189935 corresponds to 10ms)}

    set_control_par( get_ui_id( $kalimba_volume ), $CONTROL_PAR_DEFAULT_VALUE, 629961 ) {Default volume for Kalimba (629961 corresponds to 0.0 dB)}
    set_control_par( get_ui_id( $rain_stick_volume ), $CONTROL_PAR_DEFAULT_VALUE, 629961 ) {Default volume for Rain Stick (629961 corresponds to 0.0 dB)}

        {LFO}
    set_control_par( get_ui_id( $lfo_freq ), $CONTROL_PAR_DEFAULT_VALUE, 0 ) {Default LFO frequency}
    set_control_par( get_ui_id( $lfo_depth ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default LFO depth (500000 corresponds to 0% depth)}

        {Reverb}
    set_control_par( get_ui_id( $reverb_amount ), $CONTROL_PAR_DEFAULT_VALUE, 200000)       {Default reverb amount}
    set_control_par( get_ui_id( $reverb_pre_delay ), $CONTROL_PAR_DEFAULT_VALUE, 80000 )    {Default pre-delay for reverb (80000 corresponds to 20ms)}
    set_control_par( get_ui_id( $reverb_time ), $CONTROL_PAR_DEFAULT_VALUE, 484259 )       {Default reverb time (200000 corresponds to 3 seconds)}
    set_control_par( get_ui_id( $reverb_size ), $CONTROL_PAR_DEFAULT_VALUE, 1000000 )    {Default reverb size (1000000 corresponds to 100% size)}
    set_control_par( get_ui_id( $reverb_stereo ), $CONTROL_PAR_DEFAULT_VALUE, 1000000 )    {Default reverb stereo width (500000 corresponds to 50% stereo width)}
    set_control_par( get_ui_id( $reverb_low_shelf ), $CONTROL_PAR_DEFAULT_VALUE, 750000 )   {Default reverb low shelf (750000 corresponds to -9.0 dB)}
    set_control_par( get_ui_id( $reverb_high_cut ), $CONTROL_PAR_DEFAULT_VALUE, 1000000 )   {Default reverb high cut (1000000 corresponds to 21 kHz)}

        {Filter}
    set_control_par( get_ui_id( $filter_lowcut ), $CONTROL_PAR_DEFAULT_VALUE, 0 ) {Default filter low cut (0 corresponds to 20 Hz)}
    set_control_par( get_ui_id( $filter_highcut ), $CONTROL_PAR_DEFAULT_VALUE, 1000000 ) {Default filter high cut (1000000 corresponds to 20 kHz)}

        {Psyche Delay}
    set_control_par( get_ui_id( $psyche_delay_amount ), $CONTROL_PAR_DEFAULT_VALUE, 200000 ) {Default psyche delay amount}
    set_control_par( get_ui_id( $psyche_delay_time ), $CONTROL_PAR_DEFAULT_VALUE, 250000 ) {Default psyche delay time (500000 corresponds to 500 ms)}
    set_control_par( get_ui_id( $psyche_delay_feedback ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default psyche delay feedback (500000 corresponds to 50% feedback)}
    set_control_par( get_ui_id( $psyche_delay_lr_offset ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default psyche delay left/right offset (500000 corresponds to 50% offset)}
    set_control_par( get_ui_id( $psyche_delay_cross_fb ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default psyche delay cross feedback (500000 corresponds to 50% cross feedback)}
    set_control_par( get_ui_id( $psyche_delay_pitch ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default psyche delay pitch (500000 corresponds to 0.0 semitones)}
    set_control_par( get_ui_id( $psyche_delay_detune ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default psyche delay detune (500000 corresponds to 0.0 cents)}

        {Replika Delay}
    set_control_par( get_ui_id( $replika_delay_amount ), $CONTROL_PAR_DEFAULT_VALUE, 200000 ) {Default replika delay amount}
    set_control_par( get_ui_id( $replika_delay_time ), $CONTROL_PAR_DEFAULT_VALUE, 250000 ) {Default replika delay time (500000 corresponds to 500 ms)}
    set_control_par( get_ui_id( $replika_delay_feedback ), $CONTROL_PAR_DEFAULT_VALUE, 416667 ) {Default replika delay feedback (500000 corresponds to 50% feedback)}
    set_control_par( get_ui_id( $replika_delay_filter ), $CONTROL_PAR_DEFAULT_VALUE, 500000 ) {Default replika delay depth (500000 corresponds to 50% depth)}



    {Granular Settings Panel}
    set_control_par( get_ui_id( $grainAmount ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $GrainSettingsPanel ) )
    set_control_par( get_ui_id( $grainDuration ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $GrainSettingsPanel ) )

    set_control_par( get_ui_id( $width_knob ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $GrainSettingsPanel ) )
    set_control_par( get_ui_id( $width_knob ), $CONTROL_PAR_POS_X, 110 )

    set_control_par( get_ui_id( $grainAmount ), $CONTROL_PAR_POS_X, 0 )
    set_control_par( get_ui_id( $grainDuration ), $CONTROL_PAR_POS_Y, 60 )

    set_control_par( get_ui_id( $grainAmount_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $GrainSettingsPanel ) )
    hide_part( $grainAmount_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $grainAmount_label ), $CONTROL_PAR_POS_X, 60)
    set_control_par( get_ui_id( $grainAmount_label ), $CONTROL_PAR_POS_Y, 25 )

    set_control_par( get_ui_id( $grainDuration_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $GrainSettingsPanel ) )
    hide_part( $grainDuration_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $grainDuration_label ), $CONTROL_PAR_POS_X, 58 )
    set_control_par( get_ui_id( $grainDuration_label ), $CONTROL_PAR_POS_Y, 85 )

    set_control_par( get_ui_id( $width_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $GrainSettingsPanel ) )
    hide_part( $width_label, $HIDE_PART_BG )
    set_control_par( get_ui_id( $width_label ), $CONTROL_PAR_POS_X, 167 )
    set_control_par( get_ui_id( $width_label ), $CONTROL_PAR_POS_Y, 25 )




    {Envelope Settings Panel}
    set_control_par( get_ui_id( $amp_env_attack ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EnvelopeSettingsPanel ) )
    set_control_par( get_ui_id( $amp_env_decay ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EnvelopeSettingsPanel ) )

    set_control_par( get_ui_id( $amp_env_attack ), $CONTROL_PAR_POS_X, 3 )
    set_control_par( get_ui_id( $amp_env_attack ), $CONTROL_PAR_POS_Y, 28 )
    set_control_par( get_ui_id( $amp_env_decay ), $CONTROL_PAR_POS_X, 48 )
    set_control_par( get_ui_id( $amp_env_decay ), $CONTROL_PAR_POS_Y, 28 )

    set_control_par( get_ui_id( $amp_env_attack_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EnvelopeSettingsPanel ) )
    set_control_par( get_ui_id( $amp_env_decay_label ), $CONTROL_PAR_PARENT_PANEL, get_ui_id( $EnvelopeSettingsPanel ) )

    hide_part ($amp_env_attack_label,$HIDE_PART_BG)
    set_control_par( get_ui_id( $amp_env_attack_label ), $CONTROL_PAR_POS_X, 0 )
    set_control_par( get_ui_id( $amp_env_attack_label ), $CONTROL_PAR_POS_Y, 68 )

    hide_part ($amp_env_decay_label,$HIDE_PART_BG) 
    set_control_par( get_ui_id( $amp_env_decay_label ), $CONTROL_PAR_POS_X, 46 )
    set_control_par( get_ui_id( $amp_env_decay_label ), $CONTROL_PAR_POS_Y, 68 )




    {Changing pictures}
    set_control_par_str(get_ui_id($grainAmount), $CONTROL_PAR_PICTURE, "knob")
    set_control_par_str( get_ui_id( $grainDuration ), $CONTROL_PAR_PICTURE, "knob" )
    set_control_par_str( get_ui_id($width_knob), $CONTROL_PAR_PICTURE, "knob")

    set_control_par_str(get_ui_id( $amp_env_attack ), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($amp_env_decay), $CONTROL_PAR_PICTURE, "attack_decay_knob")

        {Kalimba}
    set_control_par_str(get_ui_id($kalimba_position), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($kalimba_position_random), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($kalimba_volume), $CONTROL_PAR_PICTURE, "attack_decay_knob")

        {Rain Stick}
    set_control_par_str(get_ui_id($rain_stick_position), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($rain_stick_position_random), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($rain_stick_volume), $CONTROL_PAR_PICTURE, "attack_decay_knob")


        {LFO}
    set_control_par_str(get_ui_id($lfo_freq), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($lfo_depth), $CONTROL_PAR_PICTURE, "knob")
    set_control_par_str(get_ui_id($lfo_fade_in), $CONTROL_PAR_PICTURE, "attack_decay_knob")

        {Reverb}
    set_control_par_str(get_ui_id($reverb_amount), $CONTROL_PAR_PICTURE, "knob")
    set_control_par_str(get_ui_id($reverb_pre_delay), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($reverb_time), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($reverb_size), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($reverb_stereo), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($reverb_low_shelf), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($reverb_high_cut), $CONTROL_PAR_PICTURE, "attack_decay_knob")

        {Filter}
    set_control_par_str(get_ui_id($filter_lowcut), $CONTROL_PAR_PICTURE, "knob2")
    set_control_par_str(get_ui_id($filter_lowcut_resonance), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($filter_highcut), $CONTROL_PAR_PICTURE, "knob2")
    set_control_par_str(get_ui_id($filter_highcut_resonance), $CONTROL_PAR_PICTURE, "attack_decay_knob")

    {Psyche Delay}
    set_control_par_str(get_ui_id($psyche_delay_amount), $CONTROL_PAR_PICTURE, "knob")
    set_control_par_str(get_ui_id($psyche_delay_time), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($psyche_delay_feedback), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($psyche_delay_lr_offset), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($psyche_delay_cross_fb), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($psyche_delay_pitch), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($psyche_delay_detune), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    
    {Replika Delay}
    set_control_par_str(get_ui_id($replika_delay_amount), $CONTROL_PAR_PICTURE, "knob")
    set_control_par_str(get_ui_id($replika_delay_time), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($replika_delay_feedback), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($replika_delay_depth), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($replika_delay_rate), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($replika_delay_saturation), $CONTROL_PAR_PICTURE, "attack_decay_knob")
    set_control_par_str(get_ui_id($replika_delay_filter), $CONTROL_PAR_PICTURE, "attack_decay_knob")


    {Mouse Controls/Behaviour}
    declare const $mouse_behaviour := -1050
    set_control_par(get_ui_id($grainAmount), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($grainDuration), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour + 500)
    set_control_par(get_ui_id($width_knob), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

    set_control_par(get_ui_id($amp_env_attack), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($amp_env_decay), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

    set_control_par(get_ui_id($kalimba_position), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($kalimba_position_random), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($kalimba_volume), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

    set_control_par( get_ui_id($rain_stick_position), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par( get_ui_id($rain_stick_position_random), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par( get_ui_id($rain_stick_volume), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

        {LFO}
    set_control_par(get_ui_id($lfo_freq), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($lfo_depth), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($lfo_fade_in), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

        {Reverb}
    set_control_par(get_ui_id($reverb_amount), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($reverb_pre_delay), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($reverb_time), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour + 900)
    set_control_par(get_ui_id($reverb_size), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($reverb_stereo), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($reverb_low_shelf), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($reverb_high_cut), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

        {Filter}
    set_control_par(get_ui_id($filter_lowcut), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($filter_lowcut_resonance), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($filter_highcut), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($filter_highcut_resonance), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

        {Psyche Delay}
    set_control_par(get_ui_id($psyche_delay_amount), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($psyche_delay_time), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour + 900)
    set_control_par(get_ui_id($psyche_delay_feedback), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($psyche_delay_lr_offset), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($psyche_delay_cross_fb), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($psyche_delay_pitch), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($psyche_delay_detune), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)

        {Replika Delay}
    set_control_par(get_ui_id($replika_delay_amount), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($replika_delay_time), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour + 900)
    set_control_par(get_ui_id($replika_delay_feedback), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($replika_delay_depth), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($replika_delay_rate), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($replika_delay_saturation), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)
    set_control_par(get_ui_id($replika_delay_filter), $CONTROL_PAR_MOUSE_BEHAVIOUR, $mouse_behaviour)


    {Persistency}
    make_persistent( $grainAmount )
    make_persistent( $grainDuration )
    make_persistent( $width_knob )
    
    make_persistent( $grainAmount_label)
    make_persistent( $grainDuration_label)
    make_persistent( $width_label )

    make_persistent( $amp_env_attack )
    make_persistent( $amp_env_decay )

    make_persistent( $kalimba_toggle_button )
    make_persistent( $kalimba_reverse_button )
    make_persistent( $kalimba_position )
    make_persistent( $kalimba_position_random )
    make_persistent( $kalimba_volume )

    make_persistent( $rain_stick_toggle_button )
    make_persistent( $rain_stick_reverse_button )
    make_persistent( $rain_stick_position )
    make_persistent( $rain_stick_position_random ) 
    make_persistent( $rain_stick_volume )

    make_persistent( $lfo_freq )
    make_persistent( $lfo_depth )
    make_persistent( $lfo_fade_in )

    make_persistent( $reverb_amount )
    make_persistent( $reverb_pre_delay )
    make_persistent( $reverb_time )
    make_persistent( $reverb_size )
    make_persistent( $reverb_stereo )
    make_persistent( $reverb_low_shelf )
    make_persistent( $reverb_high_cut )

    make_persistent( $filter_lowcut )
    make_persistent( $filter_lowcut_resonance )
    make_persistent( $filter_highcut )
    make_persistent( $filter_highcut_resonance )

    make_persistent( $psyche_delay_amount )
    make_persistent( $psyche_delay_time )
    make_persistent( $psyche_delay_feedback )
    make_persistent( $psyche_delay_lr_offset )
    make_persistent( $psyche_delay_cross_fb )
    make_persistent( $psyche_delay_pitch )
    make_persistent( $psyche_delay_detune )

    make_persistent( $replika_delay_amount )
    make_persistent( $replika_delay_time )
    make_persistent( $replika_delay_feedback )
    make_persistent( $replika_delay_depth )
    make_persistent( $replika_delay_rate )
    make_persistent( $replika_delay_saturation )
    make_persistent( $replika_delay_filter )
end on




on persistence_changed
    set_control_par_str(get_ui_id( $grainAmount_label ), $CONTROL_PAR_TEXT, get_control_par(get_ui_id( $grainAmount ), $CONTROL_PAR_VALUE) & " GRAINS")
    set_control_par_str( get_ui_id( $grainDuration_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_HOLD, 0, 0, -1 ) & " ms" )

    set_control_par_str( get_ui_id( $width_label ), $CONTROL_PAR_TEXT, "WIDTH" )

    $timebetweenGrains := 1000000 / get_control_par(get_ui_id($grainAmount), $CONTROL_PAR_VALUE) {update time between grains}


    %instrument_position[0] := $kalimba_position
    %instrument_position[1] := $rain_stick_position

    ?instrument_position_randomness[0] := real($kalimba_position_random ) / 1000000.0
    ?instrument_position_randomness[1] := real($rain_stick_position_random ) / 1000000.0

    set_engine_par($ENGINE_PAR_VOLUME, $kalimba_volume, 0, 0, -1) {Set volume for Kalimba}
    set_engine_par($ENGINE_PAR_VOLUME, $kalimba_volume, 1, 0, -1) {Set volume for Kalimba}

    set_engine_par($ENGINE_PAR_VOLUME, $rain_stick_volume, 2, 0, -1) {Set volume for Rain Stick}
    set_engine_par($ENGINE_PAR_VOLUME, $rain_stick_volume, 3, 0, -1) {Set volume for Rain Stick}

    {Activation of Instruments}
    if($kalimba_toggle_button = 1) {Activate Kalimba if the toggle button is active}
        %instrument_active[0] := 1
    else
        %instrument_active[0] := 0
    end if

    if($kalimba_reverse_button = 1) {Activate Kalimba Reverse if the toggle button is active}
        %instrument_reverse[0] := 1
    else
        %instrument_reverse[0] := 0
    end if

    if($rain_stick_toggle_button = 1) {Activate Rain Effect if the toggle button is active}
        %instrument_active[1] := 1
    else
        %instrument_active[1] := 0
    end if

    if($rain_stick_reverse_button = 1) {Activate Rain Effect Reverse if the toggle button is active}
        %instrument_reverse[1] := 1
    else
        %instrument_reverse[1] := 0
    end if

end on




on note
    ignore_event($EVENT_ID)

    %note_active[$EVENT_NOTE] := 1
    %evento_id[$EVENT_NOTE] := $EVENT_ID {Store the event ID for the note}

    while(%evento_id[$EVENT_NOTE] = $EVENT_ID and %note_active[$EVENT_NOTE] = 1)

            {First active/deactive the groups}
            $a := 0
            $b := 0
            while ( $a < $instrument_number )
                $b := $a * 2
                if(%instrument_active[$a] = 1)
                    if (%instrument_reverse[$a] = 0)        {If normal}
                        allow_group( %group[$b])
                        disallow_group( %group[$b + 1] ) 

                        set_engine_par( $ENGINE_PAR_MOD_TARGET_INTENSITY, %instrument_position[$a] + int( real( random( - %instrument_position[$a], 1000000 - %instrument_position[$a] ) ) * ?instrument_position_randomness[$a] ), %group[$b], get_mod_idx( %group[$b], "SAMPLE START" ), -1 )
                    else                                    {If reversed}
                        allow_group( %group[$b + 1])
                        disallow_group( %group[$b] ) 

                        set_engine_par( $ENGINE_PAR_MOD_TARGET_INTENSITY, (1000000) - (%instrument_position[$a] + int( real( random( - %instrument_position[$a], 1000000 - %instrument_position[$a] ) ) * ?instrument_position_randomness[$a] )), %group[$b + 1], get_mod_idx( %group[$b + 1], "SAMPLE START" ), -1 )
                    end if
                else
                    disallow_group( %group[$b] )
                    disallow_group( %group[$b + 1] )
                end if

                inc($a)
            end while

            {Set position (+ random) per isntrumnet}
            
            
            
        
            $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, $offset, 0)
            change_pan( $new_id, random( - $width_knob, $width_knob), 0 )

            message( "PLAYING " & $EVENT_NOTE & " with ID: " & $EVENT_ID )
            wait($timebetweenGrains)
    end while
end on




on release
    %note_active[$EVENT_NOTE] := 0
    if(%evento_id[$EVENT_NOTE] = $EVENT_ID)
        %evento_id[$EVENT_NOTE] := 0 {Reset the event ID for the note}
    end if
end on



{Granular Settings}
on ui_control( $grainAmount )
    %callback_ids[0] := $NI_CALLBACK_ID
    $timebetweenGrains := 1000000 / get_control_par(get_ui_id($grainAmount), $CONTROL_PAR_VALUE) {update time between grains}
    set_control_par_str( get_ui_id( $grainAmount_label ), $CONTROL_PAR_TEXT, get_control_par(get_ui_id($grainAmount), $CONTROL_PAR_VALUE) & " GRAINS" )
end on

on ui_control( $grainDuration )
    %callback_ids[1] := $NI_CALLBACK_ID
    $count := 0
    while ( $count < $instrument_number * 2 )
        set_engine_par($ENGINE_PAR_HOLD, $grainDuration, $count, 0, -1)
        inc($count)
    end while
    
    set_control_par_str( get_ui_id( $grainDuration_label ), $CONTROL_PAR_TEXT, get_engine_par_disp($ENGINE_PAR_HOLD, 0, 0, -1) & " ms" )
end on

on ui_control( $amp_env_attack )
    %callback_ids[2] := $NI_CALLBACK_ID

    $count := 0
    while ( $count < $instrument_number * 2 )
        set_engine_par($ENGINE_PAR_ATTACK, $amp_env_attack, $count, 0, -1)
        inc($count)
    end while

    set_control_par_str( get_ui_id( $amp_env_attack_label ), $CONTROL_PAR_TEXT, get_engine_par_disp($ENGINE_PAR_ATTACK, 0, 0, -1) & " ms" )

    wait($ui_wait)
    if(%callback_ids[2] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($amp_env_attack_label), $CONTROL_PAR_TEXT, "Attack")
    end if
end on

on ui_control( $amp_env_decay )
    %callback_ids[3] := $NI_CALLBACK_ID

    $count := 0
    while ( $count < $instrument_number * 2)
        set_engine_par($ENGINE_PAR_DECAY, $amp_env_decay, $count, 0, -1)
        inc($count)
    end while

    set_control_par_str( get_ui_id( $amp_env_decay_label ), $CONTROL_PAR_TEXT, get_engine_par_disp($ENGINE_PAR_DECAY, 0, 0, -1) & " ms" )

    wait($ui_wait)
    if(%callback_ids[3] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($amp_env_decay_label), $CONTROL_PAR_TEXT, "Decay")
    end if
end on

on ui_control( $width_knob )
    %callback_ids[4] := $NI_CALLBACK_ID

     set_control_par_str( get_ui_id( $width_label ), $CONTROL_PAR_TEXT, "  " & $width_knob/10 & "%" )

     wait( $ui_wait )
     if( %callback_ids[4] = $NI_CALLBACK_ID )
        set_control_par_str( get_ui_id( $width_label ), $CONTROL_PAR_TEXT, "WIDTH" )
     end if
end on


{Kalimba Related}
on ui_control( $kalimba_toggle_button )
    %instrument_active[0] := $kalimba_toggle_button
end on

on ui_control( $kalimba_reverse_button )
    if($kalimba_reverse_button = 1)
        %instrument_reverse[0] := 1
    else
        %instrument_reverse[0] := 0
    end if
end on

on ui_control( $kalimba_position )
    %instrument_position[0] := $kalimba_position
end on

on ui_control( $kalimba_position_random )
    %callback_ids[5] := $NI_CALLBACK_ID
    ?instrument_position_randomness[0] := real($kalimba_position_random ) / 1000000.0

    set_control_par_str( get_ui_id( $kalimba_position_random_label ), $CONTROL_PAR_TEXT, "    " & $kalimba_position_random / 10000 & "%" )

    wait($ui_wait)
    if(%callback_ids[5] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($kalimba_position_random_label), $CONTROL_PAR_TEXT, "RANDOM")
    end if
end on

on ui_control( $kalimba_volume)
    %callback_ids[6] := $NI_CALLBACK_ID
    set_engine_par($ENGINE_PAR_VOLUME, $kalimba_volume, 0, 0, -1) {Set volume for Kalimba}
    set_engine_par($ENGINE_PAR_VOLUME, $kalimba_volume, 1, 0, -1) {Set volume for Kalimba}

    set_control_par_str( get_ui_id( $kalimba_volume_label ), $CONTROL_PAR_TEXT, "  " & get_engine_par_disp( $ENGINE_PAR_VOLUME, 0, 0, -1 ) & " dB" )

    wait($ui_wait)
    if(%callback_ids[6] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($kalimba_volume_label), $CONTROL_PAR_TEXT, "VOLUME")
    end if
end on

{Rain Stick Related}
on ui_control( $rain_stick_toggle_button )
    %instrument_active[1] := $rain_stick_toggle_button
end on

on ui_control( $rain_stick_reverse_button )
    if($rain_stick_reverse_button = 1)
        %instrument_reverse[1] := 1
    else
        %instrument_reverse[1] := 0
    end if
end on

on ui_control( $rain_stick_position )
    %instrument_position[1] := $rain_stick_position
end on

on ui_control( $rain_stick_position_random )
    %callback_ids[7] := $NI_CALLBACK_ID
    ?instrument_position_randomness[1] := real($rain_stick_position_random ) / 1000000.0

    set_control_par_str( get_ui_id( $rain_stick_position_random_label ), $CONTROL_PAR_TEXT, "    " & $rain_stick_position_random / 10000 & "%" )

    wait($ui_wait)
    if(%callback_ids[7] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($rain_stick_position_random_label), $CONTROL_PAR_TEXT, "RANDOM")
    end if
end on

on ui_control( $rain_stick_volume )
    %callback_ids[8] := $NI_CALLBACK_ID
    set_engine_par($ENGINE_PAR_VOLUME, $rain_stick_volume, 2, 0, -1) {Set volume for Rain Stick}
    set_engine_par($ENGINE_PAR_VOLUME, $rain_stick_volume, 3, 0, -1) {Set volume for Rain Stick}

    set_control_par_str( get_ui_id( $rain_stick_volume_label ), $CONTROL_PAR_TEXT, "  " & get_engine_par_disp( $ENGINE_PAR_VOLUME, 2, 0, -1 ) & " dB" )

    wait($ui_wait)
    if(%callback_ids[8] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($rain_stick_volume_label), $CONTROL_PAR_TEXT, "VOLUME")
    end if
end on



{LFO Related}
on ui_control($lfo_freq)
    %callback_ids[27] := $NI_CALLBACK_ID
    $count := 0
    while ( $count < $instrument_number * 2 )
        set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY, $lfo_freq, $count, get_mod_idx( $count,"LFO"), -1)
        inc( $count )
    end while

    set_control_par_str(get_ui_id($lfo_freq_label), $CONTROL_PAR_TEXT, get_engine_par_disp($ENGINE_PAR_INTMOD_FREQUENCY, 0, get_mod_idx( 0,"LFO"), -1) & " Hz")

    wait($ui_wait)
    if(%callback_ids[27] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($lfo_freq_label), $CONTROL_PAR_TEXT, " FREQ")
    end if
end on

on ui_control($lfo_depth)
    %callback_ids[28] := $NI_CALLBACK_ID
    $count := 0
    while ( $count < $instrument_number * 2 )
        set_engine_par($ENGINE_PAR_INTMOD_INTENSITY, $lfo_depth, $count, get_mod_idx( $count,"LFO"), -1)
        inc( $count )
    end while
    set_control_par_str(get_ui_id($lfo_depth_label), $CONTROL_PAR_TEXT, get_engine_par_disp($ENGINE_PAR_INTMOD_INTENSITY, 0, get_mod_idx( 0,"LFO"), -1) & " %")

    wait($ui_wait)
    if(%callback_ids[28] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($lfo_depth_label), $CONTROL_PAR_TEXT, "DEPTH")
    end if
end on

on ui_control($lfo_fade_in)
    %callback_ids[29] := $NI_CALLBACK_ID
    $count := 0
    while ( $count < $instrument_number * 2 )
        set_engine_par($ENGINE_PAR_LFO_DELAY, $lfo_fade_in, $count, get_mod_idx( $count,"LFO"), -1)
        inc( $count )
    end while

    set_control_par_str(get_ui_id($lfo_fade_in_label), $CONTROL_PAR_TEXT, get_engine_par_disp($ENGINE_PAR_LFO_DELAY, 0, get_mod_idx( 0,"LFO"), -1) & " ms")

    wait($ui_wait)
    if(%callback_ids[29] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($lfo_fade_in_label), $CONTROL_PAR_TEXT, "FADE IN")
    end if
end on

{Effects Related}

on ui_control( $effects_bypass_all )
    if ( %bypassed[0] = 0 )
        set_control_par( get_ui_id( $reverb_bypass_button ), $CONTROL_PAR_VALUE, $effects_bypass_all )
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $reverb_bypass_button, -1, 0, $NI_MAIN_BUS ) 
    end if

    if ( %bypassed[1] = 0 )
        set_control_par( get_ui_id( $filter_bypass_button ), $CONTROL_PAR_VALUE, $effects_bypass_all )
        set_engine_par( $ENGINE_PAR_EFFECT_BYPASS, $filter_bypass_button, -1, 1, $NI_MAIN_BUS ) {Bypass LOW CUT filter}
        set_engine_par( $ENGINE_PAR_EFFECT_BYPASS, $filter_bypass_button, -1, 2, $NI_MAIN_BUS ) {Bypass HIGH CUT filter}
    end if

    if ( %bypassed[2] = 0 )
        set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_VALUE, $effects_bypass_all )
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $psyche_delay_bypass_button, -1, 0, $NI_SEND_BUS ) 
    end if

    if ( %bypassed[3] = 0 )
        set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_VALUE, $effects_bypass_all )
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS ) 
    end if
end on

    {Reverb}
on ui_control( $reverb_amount )
    %callback_ids[9] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, $reverb_amount, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_amount_label ), $CONTROL_PAR_TEXT, "  " & get_engine_par_disp( $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, -1, 0, $NI_MAIN_BUS ) & " dB" )

    wait($ui_wait)
    if(%callback_ids[9] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_amount_label), $CONTROL_PAR_TEXT, "AMOUNT")
    end if
end on

on ui_control( $reverb_pre_delay )
    %callback_ids[10] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RV2_PREDELAY, $reverb_pre_delay, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_pre_delay_label ), $CONTROL_PAR_TEXT, "  " & get_engine_par_disp( $ENGINE_PAR_RV2_PREDELAY, -1, 0, $NI_MAIN_BUS ) & " ms" )

    wait($ui_wait)
    if(%callback_ids[10] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_pre_delay_label), $CONTROL_PAR_TEXT, "PRE-DELAY")
    end if
end on

on ui_control( $reverb_time )
    %callback_ids[11] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RV2_TIME, $reverb_time, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_time_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RV2_TIME, -1, 0, $NI_MAIN_BUS ) & " ms" )

    wait($ui_wait)
    if(%callback_ids[11] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_time_label), $CONTROL_PAR_TEXT, "TIME")
    end if
end on

on ui_control( $reverb_size )
    %callback_ids[12] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RV2_SIZE, $reverb_size, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_size_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RV2_SIZE, -1, 0, $NI_MAIN_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[12] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_size_label), $CONTROL_PAR_TEXT, "SIZE")
    end if
end on

on ui_control( $reverb_stereo )
    %callback_ids[13] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RV2_STEREO, $reverb_stereo, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_stereo_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RV2_STEREO, -1, 0, $NI_MAIN_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[13] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_stereo_label), $CONTROL_PAR_TEXT, "STEREO")
    end if
end on

on ui_control( $reverb_low_shelf )
    %callback_ids[14] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RV2_LOWSHELF, $reverb_low_shelf, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_low_shelf_label ), $CONTROL_PAR_TEXT, "   " & get_engine_par_disp( $ENGINE_PAR_RV2_LOWSHELF, -1, 0, $NI_MAIN_BUS ) & " dB" )

    wait($ui_wait)
    if(%callback_ids[14] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_low_shelf_label), $CONTROL_PAR_TEXT, "LOW SHELF")
    end if
end on

on ui_control( $reverb_high_cut )
    %callback_ids[15] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RV2_HIGHCUT, 1000000 - $reverb_high_cut, -1, 0, $NI_MAIN_BUS )

    set_control_par_str( get_ui_id( $reverb_high_cut_label ), $CONTROL_PAR_TEXT, "   " & get_engine_par_disp( $ENGINE_PAR_RV2_HIGHCUT, -1, 0, $NI_MAIN_BUS ) & " Hz" )

    wait($ui_wait)
    if(%callback_ids[15] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($reverb_high_cut_label), $CONTROL_PAR_TEXT, "HIGH CUT")
    end if
end on

on ui_control( $reverb_bypass_button )
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $reverb_bypass_button, -1, 0, $NI_MAIN_BUS )
    %bypassed[0] := $reverb_bypass_button 

    if( %bypassed[0] = 0 )
        set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_VALUE, 0 ) 
    end if
end on

    {Filter}
on ui_control( $filter_lowcut )
    %callback_ids[16] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_CUTOFF, $filter_lowcut, -1, 1, $NI_MAIN_BUS )
    set_control_par_str( get_ui_id( $filter_lowcut_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_CUTOFF, -1, 1, $NI_MAIN_BUS ) & " Hz" )
    wait($ui_wait)
    if(%callback_ids[16] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($filter_lowcut_label), $CONTROL_PAR_TEXT, "LOW CUT")
    end if
end on

on ui_control( $filter_lowcut_resonance )
    %callback_ids[17] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RESONANCE, $filter_lowcut_resonance, -1, 1, $NI_MAIN_BUS )
    set_control_par_str( get_ui_id( $filter_lowcut_resonance_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RESONANCE, -1, 1, $NI_MAIN_BUS ) & " %" )
    wait($ui_wait)
    if(%callback_ids[17] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($filter_lowcut_resonance_label), $CONTROL_PAR_TEXT, "LC RES")
    end if
end on

on ui_control( $filter_highcut )
    %callback_ids[18] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_CUTOFF, $filter_highcut, -1, 2, $NI_MAIN_BUS )
    set_control_par_str( get_ui_id( $filter_highcut_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_CUTOFF, -1, 2, $NI_MAIN_BUS ) & " Hz" )
    wait($ui_wait)
    if(%callback_ids[18] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($filter_highcut_label), $CONTROL_PAR_TEXT, "HIGH CUT")
    end if
end on

on ui_control( $filter_highcut_resonance )
    %callback_ids[19] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RESONANCE, $filter_highcut_resonance, -1, 2, $NI_MAIN_BUS )
    set_control_par_str( get_ui_id( $filter_highcut_resonance_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RESONANCE, -1, 2, $NI_MAIN_BUS ) & " %" )
    wait($ui_wait)
    if(%callback_ids[19] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($filter_highcut_resonance_label), $CONTROL_PAR_TEXT, "HC RES")
    end if
end on

on ui_control( $filter_bypass_button )
    set_engine_par( $ENGINE_PAR_EFFECT_BYPASS, $filter_bypass_button, -1, 1, $NI_MAIN_BUS ) {Bypass LOW CUT filter}
    set_engine_par( $ENGINE_PAR_EFFECT_BYPASS, $filter_bypass_button, -1, 2, $NI_MAIN_BUS ) {Bypass HIGH CUT filter}
    %bypassed[1] := $filter_bypass_button {Store the bypass state of the filter}

    if( %bypassed[1] = 0 )
        set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_VALUE, 0 ) 
    end if
end on

    {Psyche Delay}
on ui_control( $psyche_delay_toggle_button )
    if($psyche_delay_toggle_button = 0)
        set_control_par( get_ui_id( $PsycheDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL )

        set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_VALUE, 1 )
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $psyche_delay_bypass_button, -1, 0, $NI_SEND_BUS ) 
        %bypassed[2] := $psyche_delay_bypass_button {Store the bypass state of the psyche delay}

        set_control_par( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_VALUE, 1 ) 
        set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING )

        set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_VALUE, 0 ) 
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS )
        %bypassed[3] := $replika_delay_bypass_button {Store the bypass state of the replika delay}
    else
        set_control_par( get_ui_id( $replika_delay_toggle_button ), $CONTROL_PAR_VALUE, 0 ) 
        set_control_par( get_ui_id( $PsycheDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING )

        set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_VALUE, 0 ) 
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $psyche_delay_bypass_button, -1, 0, $NI_SEND_BUS ) 
        %bypassed[2] := $psyche_delay_bypass_button {Store the bypass state of the psyche delay}

        set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL )

        set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_VALUE, 1 ) 
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS )
        %bypassed[3] := $replika_delay_bypass_button {Store the bypass state of the replika delay}
    end if

    set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_VALUE, 0 ) {Reset the bypass all button}

end on

on ui_control( $psyche_delay_amount )
    %callback_ids[20] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, $psyche_delay_amount, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_amount_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, -1, 0, $NI_SEND_BUS ) & " dB" )

    wait($ui_wait)
    if(%callback_ids[20] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_amount_label), $CONTROL_PAR_TEXT, "AMOUNT")
    end if
end on

on ui_control( $psyche_delay_time )
    %callback_ids[21] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_PSYDL_TIME, $psyche_delay_time, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_time_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_PSYDL_TIME, -1, 0, $NI_SEND_BUS ) & " ms" )

    wait($ui_wait)
    if(%callback_ids[21] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_time_label), $CONTROL_PAR_TEXT, "TIME")
    end if
end on

on ui_control( $psyche_delay_feedback )
    %callback_ids[22] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_PSYDL_FEEDBACK, $psyche_delay_feedback, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_feedback_label ), $CONTROL_PAR_TEXT, "    " & get_engine_par_disp( $ENGINE_PAR_PSYDL_FEEDBACK, -1, 0, $NI_SEND_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[22] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_feedback_label), $CONTROL_PAR_TEXT, "FEEDBACK")
    end if
end on

on ui_control( $psyche_delay_lr_offset )
    %callback_ids[23] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_PSYDL_LR_OFFSET, $psyche_delay_lr_offset, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_lr_offset_label ), $CONTROL_PAR_TEXT, "    " & get_engine_par_disp( $ENGINE_PAR_PSYDL_LR_OFFSET, -1, 0, $NI_SEND_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[23] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_lr_offset_label), $CONTROL_PAR_TEXT, "LR OFFSET")
    end if
end on

on ui_control( $psyche_delay_cross_fb )
    %callback_ids[24] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_PSYDL_CROSS_FEEDBACK, $psyche_delay_cross_fb, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_cross_fb_label ), $CONTROL_PAR_TEXT, "    " & get_engine_par_disp( $ENGINE_PAR_PSYDL_CROSS_FEEDBACK, -1, 0, $NI_SEND_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[24] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_cross_fb_label), $CONTROL_PAR_TEXT, "CROSS FB")
    end if
end on

on ui_control( $psyche_delay_pitch )
    %callback_ids[25] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_PSYDL_PITCH, $psyche_delay_pitch, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_pitch_label ), $CONTROL_PAR_TEXT, " " & get_engine_par_disp( $ENGINE_PAR_PSYDL_PITCH, -1, 0, $NI_SEND_BUS ) & " st" )

    wait($ui_wait)
    if(%callback_ids[25] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_pitch_label), $CONTROL_PAR_TEXT, "PITCH")
    end if
end on

on ui_control( $psyche_delay_detune )
    %callback_ids[26] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_PSYDL_DETUNE, $psyche_delay_detune, -1, 0, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $psyche_delay_detune_label ), $CONTROL_PAR_TEXT, " " & get_engine_par_disp( $ENGINE_PAR_PSYDL_DETUNE, -1, 0, $NI_SEND_BUS ) & " cts" )

    wait($ui_wait)
    if(%callback_ids[26] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($psyche_delay_detune_label), $CONTROL_PAR_TEXT, "DETUNE")
    end if
end on

on ui_control( $psyche_delay_reversed_button)
    set_engine_par( $ENGINE_PAR_PSYDL_REVERSE, $psyche_delay_reversed_button, -1, 0, $NI_SEND_BUS )
end on

on ui_control( $psyche_delay_bypass_button )
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $psyche_delay_bypass_button, -1, 0, $NI_SEND_BUS ) 
    %bypassed[2] := $psyche_delay_bypass_button {Store the bypass state of the psyche delay}

    if( %bypassed[2] = 0 )
        set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_VALUE, 0 ) 
    end if
end on

    {Replika Delay}
on ui_control( $replika_delay_toggle_button )
    if($replika_delay_toggle_button = 0)
        set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL )

        set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_VALUE, 1 ) 
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS )
        %bypassed[3] := $replika_delay_bypass_button {Store the bypass state of the replika delay}

        set_control_par( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_VALUE, 1 ) 
        set_control_par( get_ui_id( $PsycheDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING )

        set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_VALUE, 0 ) 
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $psyche_delay_bypass_button, -1, 0, $NI_SEND_BUS ) 
        %bypassed[2] := $psyche_delay_bypass_button {Store the bypass state of the psyche delay}
    else
        set_control_par( get_ui_id( $psyche_delay_toggle_button ), $CONTROL_PAR_VALUE, 0 ) 
        set_control_par( get_ui_id( $ReplikaDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING )

        set_control_par( get_ui_id( $replika_delay_bypass_button ), $CONTROL_PAR_VALUE, 0 ) 
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS )
        %bypassed[3] := $replika_delay_bypass_button {Store the bypass state of the replika delay}

        set_control_par( get_ui_id( $PsycheDelaySettingsPanel ), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL )

        set_control_par( get_ui_id( $psyche_delay_bypass_button ), $CONTROL_PAR_VALUE, 1 )
        set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $psyche_delay_bypass_button, -1, 0, $NI_SEND_BUS )
        %bypassed[2] := $psyche_delay_bypass_button {Store the bypass state of the psyche delay}
    end if

    set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_VALUE, 0 ) {Reset the bypass all button}

end on

on ui_control( $replika_delay_amount )
    %callback_ids[30] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, $replika_delay_amount, -1, 1, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $replika_delay_amount_label ), $CONTROL_PAR_TEXT, "  " & get_engine_par_disp( $ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, -1, 1, $NI_SEND_BUS ) & " dB" )

    wait($ui_wait)
    if(%callback_ids[30] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_amount_label), $CONTROL_PAR_TEXT, "AMOUNT")
    end if
end on

on ui_control( $replika_delay_time )
    %callback_ids[31] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RDL_TIME, $replika_delay_time, -1, 1, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $replika_delay_time_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RDL_TIME, -1, 1, $NI_SEND_BUS ) & " ms" )

    wait($ui_wait)
    if(%callback_ids[31] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_time_label), $CONTROL_PAR_TEXT, "TIME")
    end if
end on

on ui_control( $replika_delay_feedback )
    %callback_ids[32] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RDL_FEEDBACK, $replika_delay_feedback, -1, 1, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $replika_delay_feedback_label ), $CONTROL_PAR_TEXT, "    " & get_engine_par_disp( $ENGINE_PAR_RDL_FEEDBACK, -1, 1, $NI_SEND_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[32] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_feedback_label), $CONTROL_PAR_TEXT, "FEEDBACK")
    end if
end on

on ui_control( $replika_delay_depth )
    %callback_ids[33] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RDL_DEPTH, $replika_delay_depth, -1, 1, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $replika_delay_depth_label ), $CONTROL_PAR_TEXT, " " & get_engine_par_disp( $ENGINE_PAR_RDL_DEPTH, -1, 1, $NI_SEND_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[33] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_depth_label), $CONTROL_PAR_TEXT, "DEPTH")
    end if
end on

on ui_control( $replika_delay_rate )
    %callback_ids[34] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RDL_RATE, $replika_delay_rate, -1, 1, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $replika_delay_rate_label ), $CONTROL_PAR_TEXT, get_engine_par_disp( $ENGINE_PAR_RDL_RATE, -1, 1, $NI_SEND_BUS ) & " Hz" )

    wait($ui_wait)
    if(%callback_ids[34] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_rate_label), $CONTROL_PAR_TEXT, "RATE")
    end if
end on

on ui_control( $replika_delay_saturation )
    %callback_ids[35] := $NI_CALLBACK_ID
    set_engine_par( $ENGINE_PAR_RDL_SATURATION, $replika_delay_saturation, -1, 1, $NI_SEND_BUS )

    set_control_par_str( get_ui_id( $replika_delay_saturation_label ), $CONTROL_PAR_TEXT, "      " & get_engine_par_disp( $ENGINE_PAR_RDL_SATURATION, -1, 1, $NI_SEND_BUS ) & " %" )

    wait($ui_wait)
    if(%callback_ids[35] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_saturation_label), $CONTROL_PAR_TEXT, "SATURATION")
    end if
end on

on ui_control( $replika_delay_filter )
    %callback_ids[36] := $NI_CALLBACK_ID
    
    if($replika_delay_filter < 500000)
        set_engine_par( $ENGINE_PAR_RDL_HIGHCUT, $replika_delay_filter * 2, -1, 1, $NI_SEND_BUS )
        set_control_par_str( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_TEXT, "HC " & ((1000000 - $replika_delay_filter * 2) / 10000) & " %" )
    end if
    if($replika_delay_filter > 500000)
        set_engine_par( $ENGINE_PAR_RDL_LOWCUT,  ($replika_delay_filter - 500000) * 2, -1, 1, $NI_SEND_BUS )
        set_control_par_str( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_TEXT, "LC " & ($replika_delay_filter - 500000) * 2 / 10000 & " %" )
    end if

    if( $replika_delay_filter = 500000 )
        set_control_par_str( get_ui_id( $replika_delay_filter_label ), $CONTROL_PAR_TEXT, "Default" )
    end if

    wait($ui_wait)
    if(%callback_ids[36] = $NI_CALLBACK_ID)
        set_control_par_str(get_ui_id($replika_delay_filter_label), $CONTROL_PAR_TEXT, "FILTER")
    end if
end on

on ui_control( $replika_delay_bypass_button )
    set_engine_par( $ENGINE_PAR_SEND_EFFECT_BYPASS, $replika_delay_bypass_button, -1, 1, $NI_SEND_BUS ) 
    %bypassed[3] := $replika_delay_bypass_button {Store the bypass state of the replika delay}

    if( %bypassed[3] = 0 )
        set_control_par( get_ui_id( $effects_bypass_all ), $CONTROL_PAR_VALUE, 0 ) 
    end if
end on


on listener
    if($animation = get_control_par( get_ui_id($animation), $CONTROL_PAR_MAX_VALUE ))
        $animation := 0
    else
        $animation := $animation + 1
    end if
end on 